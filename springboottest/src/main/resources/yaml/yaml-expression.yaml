# YAML的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式
# 它的基本语法规则如下
    # 大小写敏感
    # 使用缩进表示层级关系
    # 缩进时不允许使用Tab键，只允许使用空格。
    # 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
# YAML 支持的数据结构有三种
    # 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）
    # 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）
    # 纯量（scalars）：单个的、不可再分的值
---
# 对象
# JavaScript { animal: 'pets' }
animal: pets
# JavaScript { hash: { name: 'Steve', foo: 'bar' } }
hash: { name: Steve, foo: bar }
---
# 数组
# JavaScript { array: [ 'Cat', 'Dog', 'Goldfish' ] }
array:
  - Cat
  - Dog
  - Goldfish
# JavaScript { animals: [ 'Cat', 'Dog' ] }
animals: [Cat, Dog]
# JavaScript { arrayObj: [ [ 'Cat', 'Dog' ] ] }
arrayObj:
  -
    - Cat
    - Dog
    - Goldfish
---
# 复合结构
# JavaScript { languages: [ 'Ruby', 'Perl', 'Python' ], websites: { YAML: 'yaml.org', Ruby: 'ruby-lang.org', Python: 'python.org', Perl: 'use.perl.org' } }
languages:
  - Ruby
  - Perl
  - Python
websites:
  YAML: yaml.org
  Ruby: ruby-lang.org
  Python: python.org
  Perl: use.perl.org
---
# 纯量
number: 12.30
isSet: true
# null用~表示
parent: ~
# 时间采用 ISO8601 格式
iso8601: 2001-12-14t21:59:43.10-05:00
date: 1976-07-31
# YAML 允许使用两个感叹号，强制转换数据类型
e: !!str 123
f: !!str true
# 字符串默认不使用引号表示，如果字符串之中包含空格或特殊字符，需要放在引号之中，单引号和双引号都可以使用，双引号不会对特殊字符转义，字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格
# 多行字符串可以使用|保留换行符，也可以使用>折叠换行，+表示保留文字块末尾的换行，-表示删除字符串末尾的换行，锚点&和别名*，可以用来引用